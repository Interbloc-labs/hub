// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sentinel/node/v2/params.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Params struct {
	Deposit           types.Coin                               `protobuf:"bytes,1,opt,name=deposit,proto3" json:"deposit"`
	InactiveDuration  time.Duration                            `protobuf:"bytes,2,opt,name=inactive_duration,json=inactiveDuration,proto3,stdduration" json:"inactive_duration"`
	MaxGigabytePrices github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=max_gigabyte_prices,json=maxGigabytePrices,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"max_gigabyte_prices"`
	MinGigabytePrices github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=min_gigabyte_prices,json=minGigabytePrices,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"min_gigabyte_prices"`
	MaxHourlyPrices   github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=max_hourly_prices,json=maxHourlyPrices,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"max_hourly_prices"`
	MinHourlyPrices   github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,6,rep,name=min_hourly_prices,json=minHourlyPrices,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"min_hourly_prices"`
	MaxLeaseHours     int64                                    `protobuf:"varint,7,opt,name=max_lease_hours,json=maxLeaseHours,proto3" json:"max_lease_hours,omitempty"`
	MinLeaseHours     int64                                    `protobuf:"varint,8,opt,name=min_lease_hours,json=minLeaseHours,proto3" json:"min_lease_hours,omitempty"`
	MaxLeaseGigabytes int64                                    `protobuf:"varint,9,opt,name=max_lease_gigabytes,json=maxLeaseGigabytes,proto3" json:"max_lease_gigabytes,omitempty"`
	MinLeaseGigabytes int64                                    `protobuf:"varint,10,opt,name=min_lease_gigabytes,json=minLeaseGigabytes,proto3" json:"min_lease_gigabytes,omitempty"`
	RevenueShare      github_com_cosmos_cosmos_sdk_types.Dec   `protobuf:"bytes,11,opt,name=revenue_share,json=revenueShare,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"revenue_share"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_02f1279255e9f358, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "sentinel.node.v2.Params")
}

func init() { proto.RegisterFile("sentinel/node/v2/params.proto", fileDescriptor_02f1279255e9f358) }

var fileDescriptor_02f1279255e9f358 = []byte{
	// 504 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0x3f, 0x6f, 0xd3, 0x40,
	0x18, 0x87, 0x6d, 0x52, 0x92, 0xd6, 0xa5, 0xa2, 0x09, 0x0c, 0xa6, 0x12, 0x97, 0x88, 0xa1, 0xca,
	0x92, 0x3b, 0x1a, 0x26, 0xd6, 0x50, 0x09, 0x06, 0x24, 0x22, 0x77, 0x63, 0xb1, 0xce, 0xce, 0xc5,
	0x39, 0x61, 0xdf, 0x59, 0x3e, 0xdb, 0x38, 0x62, 0x67, 0x66, 0xe4, 0x23, 0x20, 0x3e, 0x49, 0xc6,
	0x8e, 0x88, 0xa1, 0x85, 0xe4, 0x8b, 0xa0, 0xfb, 0x47, 0xd3, 0x22, 0x21, 0x06, 0x3a, 0xe5, 0x72,
	0xf7, 0xbc, 0xbf, 0xe7, 0xd5, 0x6b, 0xfb, 0xbc, 0xc7, 0x82, 0xb0, 0x92, 0x32, 0x92, 0x22, 0xc6,
	0x67, 0x04, 0xd5, 0x63, 0x94, 0xe3, 0x02, 0x67, 0x02, 0xe6, 0x05, 0x2f, 0x79, 0xef, 0xd0, 0x1e,
	0x43, 0x79, 0x0c, 0xeb, 0xf1, 0x11, 0x88, 0xb9, 0xc8, 0xb8, 0x40, 0x11, 0x16, 0x04, 0xd5, 0x27,
	0x11, 0x29, 0xf1, 0x09, 0x8a, 0x39, 0x65, 0xba, 0xe2, 0xe8, 0x61, 0xc2, 0x13, 0xae, 0x96, 0x48,
	0xae, 0xcc, 0x2e, 0x48, 0x38, 0x4f, 0x52, 0x82, 0xd4, 0xbf, 0xa8, 0x9a, 0xa3, 0x59, 0x55, 0xe0,
	0x92, 0x72, 0x53, 0xf5, 0xe4, 0x63, 0xc7, 0x6b, 0x4f, 0x95, 0xb8, 0xf7, 0xdc, 0xeb, 0xcc, 0x48,
	0xce, 0x05, 0x2d, 0x7d, 0x77, 0xe0, 0x0e, 0xf7, 0xc7, 0x8f, 0xa0, 0x56, 0x42, 0xa9, 0x84, 0x46,
	0x09, 0x5f, 0x70, 0xca, 0x26, 0x3b, 0xab, 0x8b, 0xbe, 0x13, 0x58, 0xbe, 0x37, 0xf5, 0xba, 0x94,
	0xe1, 0xb8, 0xa4, 0x35, 0x09, 0xad, 0xc0, 0xbf, 0x63, 0x42, 0x74, 0x07, 0xd0, 0x76, 0x00, 0x4f,
	0x0d, 0x30, 0xd9, 0x95, 0x21, 0x9f, 0x2f, 0xfb, 0x6e, 0x70, 0x68, 0xab, 0xed, 0x59, 0xef, 0x83,
	0xf7, 0x20, 0xc3, 0x4d, 0x98, 0xd0, 0x04, 0x47, 0xcb, 0x92, 0x84, 0x79, 0x41, 0x63, 0x22, 0xfc,
	0xd6, 0xa0, 0xf5, 0xf7, 0xc6, 0x9e, 0xca, 0xcc, 0xaf, 0x97, 0xfd, 0x61, 0x42, 0xcb, 0x45, 0x15,
	0xc1, 0x98, 0x67, 0xc8, 0x0c, 0x4e, 0xff, 0x8c, 0xc4, 0xec, 0x1d, 0x2a, 0x97, 0x39, 0x11, 0xaa,
	0x40, 0x04, 0xdd, 0x0c, 0x37, 0x2f, 0x8d, 0x66, 0xaa, 0x2c, 0x4a, 0x4e, 0xd9, 0x1f, 0xf2, 0x9d,
	0xdb, 0x90, 0x53, 0x76, 0x43, 0xfe, 0xde, 0x93, 0x1d, 0x85, 0x0b, 0x5e, 0x15, 0xe9, 0xd2, 0xaa,
	0xef, 0xfe, 0x7f, 0xf5, 0xfd, 0x0c, 0x37, 0xaf, 0x94, 0x64, 0x4b, 0x4c, 0xd9, 0x0d, 0x71, 0xfb,
	0x36, 0xc4, 0x94, 0x5d, 0x13, 0x1f, 0x7b, 0xb2, 0x97, 0x30, 0x25, 0x58, 0x10, 0xa5, 0x17, 0x7e,
	0x67, 0xe0, 0x0e, 0x5b, 0xc1, 0x41, 0x86, 0x9b, 0xd7, 0x72, 0x57, 0xe2, 0x9a, 0xa3, 0xec, 0x1a,
	0xb7, 0x6b, 0x38, 0xca, 0xb6, 0x38, 0xa8, 0xdf, 0x1d, 0xcd, 0xd9, 0x87, 0x28, 0xfc, 0x3d, 0xc5,
	0x76, 0x6d, 0xa6, 0x1d, 0xbb, 0xe6, 0x7f, 0xe7, 0x5e, 0xf1, 0x9e, 0xe1, 0x4d, 0xf6, 0x15, 0x7f,
	0xe6, 0x1d, 0x14, 0xa4, 0x26, 0xac, 0x22, 0xa1, 0x58, 0xe0, 0x82, 0xf8, 0xfb, 0x03, 0x77, 0xb8,
	0x37, 0x81, 0x72, 0x12, 0xdf, 0x2f, 0xfa, 0xc7, 0xff, 0x30, 0x89, 0x53, 0x12, 0x07, 0xf7, 0x4c,
	0xc8, 0x99, 0xcc, 0x98, 0xbc, 0x59, 0xfd, 0x04, 0xce, 0x97, 0x35, 0x70, 0x56, 0x6b, 0xe0, 0x9e,
	0xaf, 0x81, 0xfb, 0x63, 0x0d, 0xdc, 0x4f, 0x1b, 0xe0, 0x9c, 0x6f, 0x80, 0xf3, 0x6d, 0x03, 0x9c,
	0xb7, 0xa3, 0xad, 0x5c, 0x7b, 0x3b, 0x8c, 0xf8, 0x7c, 0x4e, 0x63, 0x8a, 0x53, 0xb4, 0xa8, 0x22,
	0xd4, 0xe8, 0xbb, 0x44, 0x29, 0xa2, 0xb6, 0xfa, 0xe0, 0x9e, 0xfd, 0x0a, 0x00, 0x00, 0xff, 0xff,
	0x84, 0x9c, 0xe1, 0x60, 0x69, 0x04, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RevenueShare.Size()
		i -= size
		if _, err := m.RevenueShare.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if m.MinLeaseGigabytes != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinLeaseGigabytes))
		i--
		dAtA[i] = 0x50
	}
	if m.MaxLeaseGigabytes != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxLeaseGigabytes))
		i--
		dAtA[i] = 0x48
	}
	if m.MinLeaseHours != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinLeaseHours))
		i--
		dAtA[i] = 0x40
	}
	if m.MaxLeaseHours != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxLeaseHours))
		i--
		dAtA[i] = 0x38
	}
	if len(m.MinHourlyPrices) > 0 {
		for iNdEx := len(m.MinHourlyPrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinHourlyPrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.MaxHourlyPrices) > 0 {
		for iNdEx := len(m.MaxHourlyPrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MaxHourlyPrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.MinGigabytePrices) > 0 {
		for iNdEx := len(m.MinGigabytePrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinGigabytePrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.MaxGigabytePrices) > 0 {
		for iNdEx := len(m.MaxGigabytePrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MaxGigabytePrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.InactiveDuration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.InactiveDuration):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintParams(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Deposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Deposit.Size()
	n += 1 + l + sovParams(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.InactiveDuration)
	n += 1 + l + sovParams(uint64(l))
	if len(m.MaxGigabytePrices) > 0 {
		for _, e := range m.MaxGigabytePrices {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.MinGigabytePrices) > 0 {
		for _, e := range m.MinGigabytePrices {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.MaxHourlyPrices) > 0 {
		for _, e := range m.MaxHourlyPrices {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.MinHourlyPrices) > 0 {
		for _, e := range m.MinHourlyPrices {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if m.MaxLeaseHours != 0 {
		n += 1 + sovParams(uint64(m.MaxLeaseHours))
	}
	if m.MinLeaseHours != 0 {
		n += 1 + sovParams(uint64(m.MinLeaseHours))
	}
	if m.MaxLeaseGigabytes != 0 {
		n += 1 + sovParams(uint64(m.MaxLeaseGigabytes))
	}
	if m.MinLeaseGigabytes != 0 {
		n += 1 + sovParams(uint64(m.MinLeaseGigabytes))
	}
	l = m.RevenueShare.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InactiveDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.InactiveDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGigabytePrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxGigabytePrices = append(m.MaxGigabytePrices, types.Coin{})
			if err := m.MaxGigabytePrices[len(m.MaxGigabytePrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinGigabytePrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinGigabytePrices = append(m.MinGigabytePrices, types.Coin{})
			if err := m.MinGigabytePrices[len(m.MinGigabytePrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxHourlyPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxHourlyPrices = append(m.MaxHourlyPrices, types.Coin{})
			if err := m.MaxHourlyPrices[len(m.MaxHourlyPrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinHourlyPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinHourlyPrices = append(m.MinHourlyPrices, types.Coin{})
			if err := m.MinHourlyPrices[len(m.MinHourlyPrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLeaseHours", wireType)
			}
			m.MaxLeaseHours = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLeaseHours |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLeaseHours", wireType)
			}
			m.MinLeaseHours = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinLeaseHours |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLeaseGigabytes", wireType)
			}
			m.MaxLeaseGigabytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLeaseGigabytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLeaseGigabytes", wireType)
			}
			m.MinLeaseGigabytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinLeaseGigabytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevenueShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RevenueShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
