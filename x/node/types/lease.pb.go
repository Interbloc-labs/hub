// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sentinel/node/v2/lease.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Lease struct {
	ID             uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Bytes          github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=bytes,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"bytes"`
	Duration       int64                                  `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Price          types.Coin                             `protobuf:"bytes,4,opt,name=price,proto3" json:"price"`
	DistributionAt time.Time                              `protobuf:"bytes,5,opt,name=distribution_at,json=distributionAt,proto3,stdtime" json:"distribution_at"`
}

func (m *Lease) Reset()         { *m = Lease{} }
func (m *Lease) String() string { return proto.CompactTextString(m) }
func (*Lease) ProtoMessage()    {}
func (*Lease) Descriptor() ([]byte, []int) {
	return fileDescriptor_6057f83a070f02c0, []int{0}
}
func (m *Lease) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Lease) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Lease.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Lease) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Lease.Merge(m, src)
}
func (m *Lease) XXX_Size() int {
	return m.Size()
}
func (m *Lease) XXX_DiscardUnknown() {
	xxx_messageInfo_Lease.DiscardUnknown(m)
}

var xxx_messageInfo_Lease proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Lease)(nil), "sentinel.node.v2.Lease")
}

func init() { proto.RegisterFile("sentinel/node/v2/lease.proto", fileDescriptor_6057f83a070f02c0) }

var fileDescriptor_6057f83a070f02c0 = []byte{
	// 377 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0x41, 0x6e, 0x9b, 0x40,
	0x14, 0x86, 0x19, 0x6c, 0x2c, 0x97, 0x4a, 0x6d, 0x85, 0xaa, 0x8a, 0xa2, 0x6a, 0x40, 0x5d, 0x54,
	0x6c, 0x3c, 0x23, 0xbb, 0xea, 0x01, 0x4a, 0xbd, 0xb1, 0xd4, 0x28, 0x12, 0xca, 0x2a, 0x9b, 0x88,
	0x81, 0x31, 0x1e, 0x05, 0x18, 0xc4, 0x0c, 0x56, 0x7c, 0x82, 0x6c, 0x7d, 0x8c, 0x1c, 0xc5, 0x4b,
	0x2f, 0xa3, 0x2c, 0x9c, 0x04, 0x5f, 0x24, 0x82, 0x31, 0x91, 0x57, 0xbc, 0xc7, 0x7b, 0xff, 0xff,
	0xcf, 0xa7, 0x67, 0xfe, 0x10, 0xb4, 0x90, 0xac, 0xa0, 0x19, 0x2e, 0x78, 0x42, 0xf1, 0x7a, 0x86,
	0x33, 0x1a, 0x09, 0x8a, 0xca, 0x8a, 0x4b, 0x6e, 0x7d, 0xe9, 0xa7, 0xa8, 0x9d, 0xa2, 0xf5, 0xcc,
	0x81, 0x31, 0x17, 0x39, 0x17, 0x98, 0x44, 0x82, 0xe2, 0xf5, 0x94, 0x50, 0x19, 0x4d, 0x71, 0xcc,
	0x59, 0xa1, 0x14, 0xce, 0xd7, 0x94, 0xa7, 0xbc, 0x2b, 0x71, 0x5b, 0x9d, 0xfe, 0xba, 0x29, 0xe7,
	0x69, 0x46, 0x71, 0xd7, 0x91, 0x7a, 0x89, 0x25, 0xcb, 0xa9, 0x90, 0x51, 0x5e, 0xaa, 0x85, 0x9f,
	0xf7, 0xba, 0x69, 0xfc, 0x6f, 0x83, 0xad, 0x6f, 0xa6, 0xce, 0x12, 0x1b, 0x78, 0xc0, 0x1f, 0x06,
	0xa3, 0xe6, 0xe0, 0xea, 0x8b, 0x79, 0xa8, 0xb3, 0xc4, 0x9a, 0x9b, 0x06, 0xd9, 0x48, 0x2a, 0x6c,
	0xdd, 0x03, 0xfe, 0x87, 0x00, 0xed, 0x0e, 0xae, 0xf6, 0x74, 0x70, 0x7f, 0xa5, 0x4c, 0xae, 0x6a,
	0x82, 0x62, 0x9e, 0xe3, 0xd3, 0xd3, 0xd4, 0x67, 0x22, 0x92, 0x5b, 0x2c, 0x37, 0x25, 0x15, 0x68,
	0x51, 0xc8, 0x50, 0x89, 0x2d, 0xc7, 0x1c, 0x27, 0x75, 0x15, 0x49, 0xc6, 0x0b, 0x7b, 0xe0, 0x01,
	0x7f, 0x10, 0xbe, 0xf7, 0xd6, 0x1f, 0xd3, 0x28, 0x2b, 0x16, 0x53, 0x7b, 0xe8, 0x01, 0xff, 0xe3,
	0xec, 0x3b, 0x52, 0x46, 0xa8, 0x45, 0x45, 0x27, 0x54, 0xf4, 0x8f, 0xb3, 0x22, 0x18, 0xb6, 0xe1,
	0xa1, 0xda, 0xb6, 0x2e, 0xcc, 0xcf, 0x09, 0x13, 0xb2, 0x62, 0xa4, 0x6e, 0x6d, 0x6e, 0x22, 0x69,
	0x1b, 0x9d, 0x81, 0x83, 0x14, 0x35, 0xea, 0xa9, 0xd1, 0x55, 0x4f, 0x1d, 0x8c, 0x5b, 0x87, 0xed,
	0xb3, 0x0b, 0xc2, 0x4f, 0xe7, 0xe2, 0xbf, 0x32, 0xb8, 0xdc, 0xbd, 0x42, 0xed, 0xa1, 0x81, 0xda,
	0xae, 0x81, 0x60, 0xdf, 0x40, 0xf0, 0xd2, 0x40, 0xb0, 0x3d, 0x42, 0x6d, 0x7f, 0x84, 0xda, 0xe3,
	0x11, 0x6a, 0xd7, 0x93, 0x33, 0xe4, 0xfe, 0x3e, 0x13, 0xbe, 0x5c, 0xb2, 0x98, 0x45, 0x19, 0x5e,
	0xd5, 0x04, 0xdf, 0xa9, 0x63, 0x76, 0xf4, 0x64, 0xd4, 0xc5, 0xff, 0x7e, 0x0b, 0x00, 0x00, 0xff,
	0xff, 0xee, 0x0d, 0xe7, 0x81, 0xea, 0x01, 0x00, 0x00,
}

func (m *Lease) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Lease) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Lease) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.DistributionAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.DistributionAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintLease(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLease(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Duration != 0 {
		i = encodeVarintLease(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Bytes.Size()
		i -= size
		if _, err := m.Bytes.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLease(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.ID != 0 {
		i = encodeVarintLease(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLease(dAtA []byte, offset int, v uint64) int {
	offset -= sovLease(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Lease) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovLease(uint64(m.ID))
	}
	l = m.Bytes.Size()
	n += 1 + l + sovLease(uint64(l))
	if m.Duration != 0 {
		n += 1 + sovLease(uint64(m.Duration))
	}
	l = m.Price.Size()
	n += 1 + l + sovLease(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.DistributionAt)
	n += 1 + l + sovLease(uint64(l))
	return n
}

func sovLease(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLease(x uint64) (n int) {
	return sovLease(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Lease) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLease
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Lease: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Lease: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLease
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLease
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bytes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLease
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLease
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLease
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLease
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.DistributionAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLease(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLease
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLease(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLease
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLease
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLease
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLease
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLease
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLease
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLease        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLease          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLease = fmt.Errorf("proto: unexpected end of group")
)
