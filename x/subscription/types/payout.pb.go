// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sentinel/subscription/v2/payout.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Payout struct {
	ID          uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address     string     `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	NodeAddress string     `protobuf:"bytes,3,opt,name=node_address,json=nodeAddress,proto3" json:"node_address,omitempty"`
	Hours       int64      `protobuf:"varint,4,opt,name=hours,proto3" json:"hours,omitempty"`
	Price       types.Coin `protobuf:"bytes,5,opt,name=price,proto3" json:"price"`
	NextAt      time.Time  `protobuf:"bytes,6,opt,name=next_at,json=nextAt,proto3,stdtime" json:"next_at"`
}

func (m *Payout) Reset()         { *m = Payout{} }
func (m *Payout) String() string { return proto.CompactTextString(m) }
func (*Payout) ProtoMessage()    {}
func (*Payout) Descriptor() ([]byte, []int) {
	return fileDescriptor_f20b0a92fdfecfe5, []int{0}
}
func (m *Payout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Payout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Payout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Payout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payout.Merge(m, src)
}
func (m *Payout) XXX_Size() int {
	return m.Size()
}
func (m *Payout) XXX_DiscardUnknown() {
	xxx_messageInfo_Payout.DiscardUnknown(m)
}

var xxx_messageInfo_Payout proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Payout)(nil), "sentinel.subscription.v2.Payout")
}

func init() {
	proto.RegisterFile("sentinel/subscription/v2/payout.proto", fileDescriptor_f20b0a92fdfecfe5)
}

var fileDescriptor_f20b0a92fdfecfe5 = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0x3d, 0x6b, 0xdb, 0x40,
	0x18, 0xc7, 0x75, 0xb2, 0x2d, 0xb7, 0xe7, 0x4e, 0xc2, 0x14, 0xd5, 0xc3, 0x49, 0x2d, 0x14, 0xb4,
	0xf4, 0x0e, 0xbb, 0x78, 0xec, 0x60, 0xb5, 0x4b, 0xb7, 0x20, 0x02, 0x81, 0x2c, 0x46, 0x2f, 0x67,
	0xf9, 0xc0, 0xd2, 0x23, 0x74, 0x27, 0x63, 0x7f, 0x0b, 0x7f, 0x8c, 0x7c, 0x14, 0x8f, 0x1e, 0x33,
	0x39, 0x89, 0x3c, 0xe5, 0x5b, 0x04, 0x49, 0x16, 0x24, 0xdb, 0xf3, 0xf2, 0xfb, 0x73, 0xf7, 0xe3,
	0xc1, 0x3f, 0x25, 0xcf, 0x94, 0xc8, 0xf8, 0x86, 0xc9, 0x32, 0x94, 0x51, 0x21, 0x72, 0x25, 0x20,
	0x63, 0xdb, 0x19, 0xcb, 0x83, 0x3d, 0x94, 0x8a, 0xe6, 0x05, 0x28, 0x30, 0xad, 0x0e, 0xa3, 0xef,
	0x31, 0xba, 0x9d, 0x4d, 0x48, 0x04, 0x32, 0x05, 0xc9, 0xc2, 0x40, 0x72, 0xb6, 0x9d, 0x86, 0x5c,
	0x05, 0x53, 0x16, 0x81, 0xc8, 0xda, 0xe4, 0x64, 0x9c, 0x40, 0x02, 0x4d, 0xc9, 0xea, 0xea, 0x3a,
	0xb5, 0x13, 0x80, 0x64, 0xc3, 0x59, 0xd3, 0x85, 0xe5, 0x8a, 0x29, 0x91, 0x72, 0xa9, 0x82, 0x34,
	0x6f, 0x81, 0x1f, 0xaf, 0x08, 0x1b, 0x37, 0xcd, 0x0f, 0xcc, 0xaf, 0x58, 0x17, 0xb1, 0x85, 0x1c,
	0xe4, 0xf6, 0x3d, 0xa3, 0x3a, 0xdb, 0xfa, 0xff, 0x7f, 0xbe, 0x2e, 0x62, 0xd3, 0xc2, 0xc3, 0x20,
	0x8e, 0x0b, 0x2e, 0xa5, 0xa5, 0x3b, 0xc8, 0xfd, 0xec, 0x77, 0xad, 0xf9, 0x1d, 0x7f, 0xc9, 0x20,
	0xe6, 0xcb, 0x6e, 0xdd, 0x6b, 0xd6, 0xa3, 0x7a, 0xb6, 0xb8, 0x22, 0x63, 0x3c, 0x58, 0x43, 0x59,
	0x48, 0xab, 0xef, 0x20, 0xb7, 0xe7, 0xb7, 0x8d, 0x39, 0xc7, 0x83, 0xbc, 0x10, 0x11, 0xb7, 0x06,
	0x0e, 0x72, 0x47, 0xb3, 0x6f, 0xb4, 0x95, 0xa3, 0xb5, 0x1c, 0xbd, 0xca, 0xd1, 0xbf, 0x20, 0x32,
	0xaf, 0x7f, 0x3c, 0xdb, 0x9a, 0xdf, 0xd2, 0xe6, 0x1f, 0x3c, 0xcc, 0xf8, 0x4e, 0x2d, 0x03, 0x65,
	0x19, 0x4d, 0x70, 0x42, 0x5b, 0x3f, 0xda, 0xf9, 0xd1, 0xdb, 0xce, 0xcf, 0xfb, 0x54, 0x27, 0x0f,
	0x4f, 0x36, 0xf2, 0x8d, 0x3a, 0xb4, 0x50, 0xde, 0xdd, 0xf1, 0x85, 0x68, 0x0f, 0x15, 0xd1, 0x8e,
	0x15, 0x41, 0xa7, 0x8a, 0xa0, 0xe7, 0x8a, 0xa0, 0xc3, 0x85, 0x68, 0xa7, 0x0b, 0xd1, 0x1e, 0x2f,
	0x44, 0xbb, 0x9f, 0x27, 0x42, 0xad, 0xcb, 0x90, 0x46, 0x90, 0xb2, 0xee, 0x12, 0xbf, 0x60, 0xb5,
	0x12, 0x91, 0x08, 0x36, 0x6c, 0x5d, 0x86, 0x6c, 0xf7, 0xf1, 0x7e, 0x6a, 0x9f, 0x73, 0x19, 0x1a,
	0xcd, 0xf3, 0xbf, 0xdf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xee, 0x87, 0xa6, 0x42, 0xe5, 0x01, 0x00,
	0x00,
}

func (m *Payout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Payout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Payout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.NextAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.NextAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintPayout(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPayout(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Hours != 0 {
		i = encodeVarintPayout(dAtA, i, uint64(m.Hours))
		i--
		dAtA[i] = 0x20
	}
	if len(m.NodeAddress) > 0 {
		i -= len(m.NodeAddress)
		copy(dAtA[i:], m.NodeAddress)
		i = encodeVarintPayout(dAtA, i, uint64(len(m.NodeAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintPayout(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPayout(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPayout(dAtA []byte, offset int, v uint64) int {
	offset -= sovPayout(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Payout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPayout(uint64(m.ID))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPayout(uint64(l))
	}
	l = len(m.NodeAddress)
	if l > 0 {
		n += 1 + l + sovPayout(uint64(l))
	}
	if m.Hours != 0 {
		n += 1 + sovPayout(uint64(m.Hours))
	}
	l = m.Price.Size()
	n += 1 + l + sovPayout(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.NextAt)
	n += 1 + l + sovPayout(uint64(l))
	return n
}

func sovPayout(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPayout(x uint64) (n int) {
	return sovPayout(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Payout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Payout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Payout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hours", wireType)
			}
			m.Hours = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hours |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.NextAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPayout(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPayout
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPayout
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPayout
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPayout
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPayout
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPayout
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPayout        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPayout          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPayout = fmt.Errorf("proto: unexpected end of group")
)
